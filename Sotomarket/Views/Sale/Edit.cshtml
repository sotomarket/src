@model Sotomarket.Models.SaleViewModel

@{
    ViewBag.Title = "Продажа";
}

<h2>Продажа</h2>

@using (Html.BeginForm(new { action = "Edit" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Редактирование</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.Id, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.OrderId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ClientIdentifier, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ClientIdentifier, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.ClientIdentifier, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ClientAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ClientAddress, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.ClientAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ClientDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ClientDescription, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.ClientDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RealisationDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RealisationDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RealisationDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Paytype, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Paytype, new SelectListItem[] { new SelectListItem { Value = "Наличный расчет", Text = "Наличный расчет" }, new SelectListItem { Value = "Безналичный расчет", Text = "Безналичный расчет" } }, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Paytype, "", new { @class = "text-danger" })
        </div>
    </div>

    <h4>Позиции</h4>

    <table class="table" id="EditItemTable">
        <thead>
            <tr>
                <th>
                    Наименование
                </th>
                <th>
                    Бренд
                </th>
                <th>
                    Категория товара
                </th>
                <th>
                    Подкатегория товара
                </th>
                <th>
                    Количество
                </th>
                <th>
                    Цена
                </th>
                <th>
                    Сумма
                </th>
                <th>
                    Скидка
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.SaleItems != null)
            {
                foreach (var item in Model.SaleItems)
                {
                    @Html.Partial("EditItems", item)
                }
            }
        </tbody>
    </table>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Сохранить" class="btn btn-primary" />
            <input type="button" id="saveAndProcess" value="Сохранить и провести документ" class="btn btn-success" />
            @Html.HiddenFor(model => model.Processed)

            @Html.ActionLink("Отмена", "Index", null, new { @class = "btn btn-default" })
        </div>
    </div>
</div>
}

@section scripts {
    <script type="text/javascript">
    $(function () {
        
        $('#saveAndProcess').click(function () {
            $('input[name=Processed]').val("true");
            $(this).closest('form').submit();
        });
        function recalcSum() {
            var tr = $(this).closest('tr');
            $('.container-rowsum', tr).val(parseFloat($('.container-amount', tr).val()) * parseFloat($('.container-price', tr).val().replace(/,/, '.')) - parseFloat($('.container-discount', tr).val().replace(/,/, '.')));
        }
        $('.container-amount').change(recalcSum);
        $('.container-discount').change(recalcSum);
        $('.container-price').change(recalcSum);
    });
    </script>
}
